#!/bin/bash
# You got this script from: https://github.com/tweekmonster/auto_rsync
success_sound="/System/Library/Sounds/Tink.aiff"
error_sound="/System/Library/Sounds/Sosumi.aiff"
fswatch="/usr/local/bin/fswatch"
launch_agents="$HOME/Library/LaunchAgents"
watch_exclude=(
    '\.git'
    '\.pyc'
    '\.pyo'
    '\.DS_Store'
)

log_enable=0
unload=0
user="$USER"
remote=""
name=""
watch_dir=""
rsync_exclude=(
    '*.pyc'
    '*.pyo'
    '*.DS_Store*'
)
latency=""
allow_from_gitignore=0
monitor=0
additional_rsync_options=()

bail() {
    >&2 echo "$1"
    exit "${2:-1}"
}

log() {
    if [[ $2 -eq 1 ]]; then
        >&2 echo $1
    elif [[ $log_enable -eq 1 ]]; then
        echo $1
    fi
}

yn() {
    read -n 1 -p "$1" -r choice

    if [[ -z "$choice" && -n "$2" ]]; then
        return $2
    fi

    case $choice in
        y|Y)
            return 0
            ;;
        n|N)
            return 1
            ;;
        *)
            echo ""
            yn "$1" "$2"
            return $?
            ;;
    esac

    return 1
}

make_fswatch_cmd() {
    local fswatch_cmd="$fswatch --batch-marker -x"
    if [[ $latency != "" ]]; then
        fswatch_cmd="$fswatch_cmd -l $latency"
    fi
    for a in ${watch_exclude[@]} ; do
        fswatch_cmd="$fswatch_cmd -e \"$a\""
    done
    fswatch_cmd="$fswatch_cmd \"$watch_dir\""
    echo "$fswatch_cmd"
}

gitignore_excludes() {
    local exclude_phrase=""
    if [[ $allow_from_gitignore -eq 0 ]]; then
        git_top_level=$(cd $watch_dir; git rev-parse --show-toplevel 2> /dev/null)
        # git command exists and watch directory is in a git repo
        if [[ $? -eq 0 ]]; then
            local gitignores=(
                "$git_top_level/.gitignore"
                "$HOME/.gitignore_global"
            )
            for f in ${gitignores[@]}; do
                if [[ -e "$f" ]]; then
                    exclude_phrase="$exclude_phrase --exclude-from $f"
                fi
            done
        fi
    fi
    echo "$exclude_phrase"
}

make_rsync_cmd() {
    IFS=$'\n'
    local rsync_flags="--delete"

    for a in $(find "$watch_dir" -d -iname ".git"); do
        rsync_flags="$rsync_flags --exclude \"${a#$watch_dir}\""
    done

    for a in ${rsync_exclude[@]}; do
        rsync_flags="$rsync_flags --exclude \"$a\""
    done

    for a in ${additional_rsync_options[@]}; do
        rsync_flags="$rsync_flags $a"
    done

    gitignore=$(gitignore_excludes)
    rsync_flags="$rsync_flags $gitignore"

    local rsync_cmd="/usr/bin/rsync -aie \"ssh -l ${user}\" $rsync_flags \"${watch_dir}/\" \"${remote}\""
    echo "$rsync_cmd"
}

do_monitor() {
    IFS=$'\n'
    fswatch_cmd=$(make_fswatch_cmd)
    rsync_cmd=$(make_rsync_cmd)
    rsync_err=$(mktemp -t rsync_err)
    trap "rm -f '$rsync_err'" EXIT

    eval $fswatch_cmd | while read event; do
        if [[ "$event" == "NoOp" ]]; then
            rsync_changes=$(eval $rsync_cmd 2> $rsync_err)
            make_noise=0
            
            err=$(cat $rsync_err)
            if [[ -n "$err" ]]; then
                for e in $err; do
                    log "$e" 1
                done
                make_noise=2
            else
                log "rsync changes:"
                for change in $rsync_changes; do
                    log "$change"
                    if [[ $change == \<* || $change == \*deleting* ]]; then
                        make_noise=1
                    fi
                done
            fi

            if [[ $make_noise -eq 2 ]]; then
                log "Making some sad noise"
                afplay "$error_sound"
            elif [[ $make_noise -eq 1 && -n "$success_sound" ]]; then
                log "Making some noise to celebrate"
                afplay "$success_sound"
            fi
        else
            log "Event: $event"
        fi
    done

    exit 0
}

do_help() {
    cat <<EOF
Create a launchctl process that watches a directory and runs rsync when files
have changed. Without the --monitor flag, a launch agent will be created in
~/Library/LaunchAgents/ and loaded immediately.

The agent plist file is overwritten if one exists.

Options:

-n          (Required) Name for this agent. It will be labeled:
            "io.esdf.auto_rsync.<name>"
-u          Alternate login user if "$USER" is not the remote login user.
-r          The remote SSH destination, like server.com:/home/whatever/butts
-w          The directory to watch. A slash is always appended to this!
-wi         Patterns for fswatch to ignore.  Defaults: *.pyc, *.pyo, *.DS_Store
-i          rsync --exclude options (repeatable)
-l          Enable log file output for the launch agent. You will probably need
            to escape globbing characters.
-s          Latency of monitoring by fswatch, in seconds.
            Default: fswatch default latency
-g          Allow gitignore'd files in transfer.  Default: if watch directory is
            in a git repo, exclude files listed in local and global gitignores.
-o          Additional rsync options (repeatable).  Example: -o --no-p -o --no-t
--unload    Disable and unload the named agent. The plist will not be deleted,
            but this script will not unset the Disabled flag. Them's the breaks.
--monitor   Begin monitoring.  Do not use this directly. Or do. I don't care.
EOF
    exit 0
}

[[ -n "$TMUX" || -n "$STY" ]] && bail "launchctl doesn't work well in tmux/screen"
[[ ! -e "$fswatch" ]] && bail "Run before using this: brew install fswatch"

while [[ $# > 0 ]]; do
    case $1 in
        -h|--help)
            do_help
            ;;
        -n)
            name="$2"
            ;;
        -u)
            user="$2"
            ;;
        -r)
            remote="$2"
            ;;
        -w)
            watch_dir="${2%%+(/)}"
            ;;
        -wi)
            watch_exclude+=("$2")
            ;;
        -i)
            rsync_exclude+=("$2")
            ;;
        -l)
            log_enable=1
            ;;
        -s)
            latency="$2"
            ;;
        -g)
            allow_from_gitignore=1
            ;;
        -o)
            additional_rsync_options+=("$2")
            ;;
        --unload)
            unload=1
            ;;
        --monitor)
            monitor=1
            ;;
    esac
    shift
done

[[ -z "$name" ]] && bail "A name is required"

service="io.esdf.auto_rsync.${name}"
plist="$HOME/Library/LaunchAgents/${service}.plist"

[[ $monitor -eq 1 ]] && do_monitor

if [[ $unload -eq 1 ]]; then
    defaults write "$plist" Disabled -bool YES
    launchctl unload -F "$plist"
    exit 0
fi

# Create LaunchAgent and start from here
stdout="$HOME/Library/Logs/${service}.log"
stderr="$HOME/Library/Logs/${service}.err.log"

echo "plist: $plist"
echo "watching: $watch_dir"

if [[ $log_enable -eq 1 ]]; then
    echo "stdout: $stdout"
fi

echo "stderr: $stderr"

echo "fswatch command: $(make_fswatch_cmd)"
echo "rsync command: $(make_rsync_cmd)"
echo ""

yn "This look good? [y/N] " 1
[[ $? -ne 0 ]] && bail $'\nFINE'
echo ""

rm -f "$plist"
defaults write "$plist" Label -string "$service"
defaults write "$plist" Disabled -bool NO
defaults write "$plist" RunAtLoad -bool YES
defaults write "$plist" ProgramArguments -array-add "${BASH_SOURCE[0]}"
defaults write "$plist" ProgramArguments -array-add "-n"
defaults write "$plist" ProgramArguments -array-add "$name"
defaults write "$plist" ProgramArguments -array-add "-r"
defaults write "$plist" ProgramArguments -array-add "$remote"
defaults write "$plist" ProgramArguments -array-add "-u"
defaults write "$plist" ProgramArguments -array-add "$user"

defaults write "$plist" ProgramArguments -array-add "-w"
defaults write "$plist" ProgramArguments -array-add "$watch_dir"

if [[ $latency != "" ]]; then
    defaults write "$plist" ProgramArguments -array-add "-s"
    defaults write "$plist" ProgramArguments -array-add "$latency"
fi

for a in ${watch_exclude[@]}; do
    defaults write "$plist" ProgramArguments -array-add "-wi"
    defaults write "$plist" ProgramArguments -array-add "$a"
done

for a in ${rsync_exclude[@]}; do
    defaults write "$plist" ProgramArguments -array-add "-i"
    defaults write "$plist" ProgramArguments -array-add "$a"
done

for a in ${additional_rsync_options[@]}; do
    defaults write "$plist" ProgramArguments -array-add "-o"
    defaults write "$plist" ProgramArguments -array-add "$a"
done

defaults write "$plist" ProgramArguments -array-add "--monitor"

if [[ $log_enable -eq 1 ]]; then
    defaults write "$plist" ProgramArguments -array-add "-l"
    defaults write "$plist" StandardOutPath -string "$stdout"
fi

if [[ $allow_from_gitignore -eq 1 ]]; then
    defaults write "$plist" ProgramArguments -array-add "-g"
fi

defaults write "$plist" StandardErrorPath -string "$stderr"

launchctl unload "$plist" &>/dev/null
launchctl load "$plist"

echo "Done"
echo ""

echo "To disable this run: ${BASH_SOURCE[0]} -n $name --unload"
